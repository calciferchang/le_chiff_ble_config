/*
 * Copyright (c) 2021 @MangoIV
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

// makes it possible to hold backspace

&lt { quick_tap_ms = <200>; };

/ {
    combos {
        compatible = "zmk,combos";

        left_bkt {
            bindings = <&kp LBKT>;
            key-positions = <3 2>;
        };

        right_bkt {
            bindings = <&kp RBKT>;
            key-positions = <6 7>;
        };

        left_par {
            bindings = <&kp LPAR>;
            key-positions = <12 13>;
        };

        right_par {
            bindings = <&kp RPAR>;
            key-positions = <16 17>;
        };

        left_prc {
            bindings = <&kp LBRC>;
            key-positions = <22 23>;
        };

        right_prc {
            bindings = <&kp RBRC>;
            key-positions = <27 28>;
        };

        blsh {
            bindings = <&kp BSLH>;
            key-positions = <4 5>;
        };

        pipe {
            bindings = <&kp PIPE>;
            key-positions = <14 15>;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <19 18>;
        };
    };

    behaviors {
        hrm_left: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "homerow_mods_left";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <150>;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 34 35 36>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <125>;
        };

        hrm_right: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "homerow_mods_right";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <150>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <125>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32>;
        };

        skq: stickykey_quickrelease {
            compatible = "zmk,behavior-sticky-key";
            label = "stickykey_quickrelease";
            bindings = <&kp>;
            #binding-cells = <1>;
            release-after-ms = <1000>;
            quick-release;
            ignore-modifiers;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default {
            label = "base";
            bindings = <
&kp Q             &kp W             &kp F              &kp P             &kp B         &kp J       &kp L              &kp U               &kp Y              &none
&hrm_left LGUI A  &hrm_left LALT R  &hrm_left LCTRL S  &hrm_left T LGUI  &kp G         &kp M       &hrm_right RGUI N  &hrm_right RCTRL E  &hrm_right RALT I  &hrm_right RGUI O
&kp X             &kp C             &kp D              &kp V             &kp Z         &kp K       &kp H              &kp COMMA           &kp DOT            &kp FSLH
                                    &kp LEFT_GUI       &kp NUMBER_2      &kp NUMBER_3  &kp C_MUTE  &kp NUMBER_4       &kp N5              &kp NUMBER_6
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP>;
        };

        num {
            bindings = <
&kp LS(EXCL)       &kp LS(AT)         &kp LS(POUND)       &kp LS(DLLR)       &kp LS(PRCNT)  &kp LS(CARET)  &kp LS(AMPS)        &kp LS(STAR)         &kp MINUS           &kp EQUAL
&hrm_left LGUI N1  &hrm_left LALT N2  &hrm_left LCTRL N3  &hrm_left LGUI N4  &kp N5         &kp N6         &hrm_right RGUI N7  &hrm_right RCTRL N8  &hrm_right RALT N9  &hrm_right RGUI N0
&skq LS(LEFT_GUI)  &none              &none               &none              &none          &none          &none               &trans               &trans              &trans
                                      &trans              &trans             &trans         &trans         &trans              &trans               &trans
            >;
        };

        sym {
            bindings = <
&trans             &kp LA(LBKT)         &kp LA(RBKT)          &kp LA(MINUS)        &trans     &trans    &kp RS(RA(MINUS))     &kp RA(RS(RBKT))       &kp RA(RS(LBKT))      &trans
&hrm_left LGUI LT  &hrm_left LALT LPAR  &hrm_left LCTRL LBRC  &hrm_left LGUI LBKT  &kp GRAVE  &kp BSLH  &hrm_right RGUI RBKT  &hrm_right RCTRL RBRC  &hrm_right RALT RPAR  &hrm_right RGUI GREATER_THAN
&kp MINUS          &trans               &trans                &trans               &trans     &trans    &trans                &trans                 &trans                &kp EQUAL
                                        &trans                &trans               &trans     &trans    &trans                &trans                 &trans
            >;
        };

        nav {
            bindings = <
&kp HOME             &kp PG_UP            &kp PG_DN           &kp END               &trans  &trans  &trans              &trans               &trans              &trans
&hrm_left LGUI LEFT  &hrm_left LALT DOWN  &hrm_left LCTRL UP  &hrm_left LGUI RIGHT  &trans  &trans  &hrm_right RGUI N7  &hrm_right RCTRL N8  &hrm_right RALT N9  &hrm_right RGUI N0
&trans               &trans               &trans              &trans                &trans  &trans  &trans              &trans               &trans              &trans
                                          &trans              &trans                &trans  &trans  &trans              &trans               &trans
            >;
        };

        template {
            bindings = <
&trans             &trans             &trans              &trans             &trans  &trans  &trans              &trans               &trans              &trans
&hrm_left LGUI N1  &hrm_left LALT N2  &hrm_left LCTRL N3  &hrm_left LGUI N4  &trans  &trans  &hrm_right RGUI N7  &hrm_right RCTRL N8  &hrm_right RALT N9  &hrm_right RGUI N0
&trans             &trans             &trans              &trans             &trans  &trans  &trans              &trans               &trans              &trans
                                      &trans              &trans             &trans  &trans  &trans              &trans               &trans
            >;
        };
    };
};
