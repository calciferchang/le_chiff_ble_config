/*
 * Copyright (c) 2021 @MangoIV
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

// makes it possible to hold backspace

&lt { quick_tap_ms = <200>; };

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <3 2>;
        };

        esc {
            bindings = <&kp ESC>;
            key-positions = <1 2>;
        };

        semi {
            bindings = <&kp SEMI>;
            key-positions = <12 13>;
            timeout-ms = <25>;
        };

        aptos {
            bindings = <&kp APOS>;
            key-positions = <16 17>;
        };

        caps_word {
            bindings = <&caps_word>;
            key-positions = <13 16>;
        };

        caps_lock {
            bindings = <&kp CAPS>;
            key-positions = <11 12 17 18>;
        };

        lshift {
            bindings = <&skq LSHFT>;
            key-positions = <11 12>;
        };

        rshift {
            bindings = <&skq RSHIFT>;
            key-positions = <18 17>;
        };

        colon {
            bindings = <&kp COLON>;
            key-positions = <13 11>;
        };

        double_aptos {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <16 18>;
        };

        numpad {
            bindings = <&mo 6>;
            key-positions = <31 32>;
        };

        numpad2 {
            bindings = <&mo 6>;
            key-positions = <35 34>;
        };

        connectivity {
            bindings = <&mo 5>;
            key-positions = <31 35>;
        };
    };

    behaviors {
        hrm_left: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "homerow_mods_left";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 34 35 36>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <125>;
        };

        hrm_right: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "homerow_mods_right";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <125>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32>;
        };

        skq: stickykey_quickrelease {
            compatible = "zmk,behavior-sticky-key";
            label = "stickykey_quickrelease";
            bindings = <&kp>;
            #binding-cells = <1>;
            release-after-ms = <1000>;
            quick-release;
            ignore-modifiers;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default {
            label = "base";
            bindings = <
&kp Q             &kp W             &kp F              &kp P             &kp B        &kp J       &kp L              &kp U               &kp Y              &none
&hrm_left LGUI A  &hrm_left LALT R  &hrm_left LCTRL S  &hrm_left T LGUI  &kp G        &kp M       &hrm_right RGUI N  &hrm_right RCTRL E  &hrm_right RALT I  &hrm_right RGUI O
&kp X             &kp C             &kp D              &kp V             &kp Z        &kp K       &kp H              &kp COMMA           &kp DOT            &kp FSLH
                                    &mo 2              &lt 3 ENTER       &lt 4 SPACE  &kp C_MUTE  &mo 2              &lt 3 BACKSPACE     &kp EXCL
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP>;
        };

        gaming {
            bindings = <
&kp T      &kp Q  &kp W  &kp E  &kp R      &trans  &trans  &trans  &trans  &trans
&kp LSHFT  &kp A  &kp S  &kp D  &kp F      &trans  &trans  &trans  &trans  &trans
&kp LCTRL  &kp Z  &kp X  &kp C  &kp V      &trans  &trans  &trans  &trans  &trans
                  &mo 5  &mo 6  &kp SPACE  &trans  &trans  &trans  &trans
            >;
        };

        num {
            bindings = <
&kp LS(EXCL)       &kp LS(AT)         &kp LS(POUND)       &kp LS(DLLR)       &kp LS(PRCNT)  &kp LS(CARET)  &kp LS(AMPS)        &kp LS(STAR)         &kp MINUS           &kp EQUAL
&hrm_left LGUI N1  &hrm_left LALT N2  &hrm_left LCTRL N3  &hrm_left LGUI N4  &kp N5         &kp N6         &hrm_right RGUI N7  &hrm_right RCTRL N8  &hrm_right RALT N9  &hrm_right RGUI N0
&skq LS(LEFT_GUI)  &none              &none               &none              &none          &none          &none               &trans               &trans              &trans
                                      &trans              &trans             &trans         &trans         &trans              &trans               &trans
            >;
        };

        sym {
            bindings = <
&trans             &kp LA(LBKT)         &kp LA(RBKT)          &kp LA(MINUS)        &trans     &trans    &kp RS(RA(MINUS))     &kp RA(RS(RBKT))       &kp RA(RS(LBKT))      &trans
&hrm_left LGUI LT  &hrm_left LALT LPAR  &hrm_left LCTRL LBRC  &hrm_left LGUI LBKT  &kp GRAVE  &kp BSLH  &hrm_right RGUI RBKT  &hrm_right RCTRL RBRC  &hrm_right RALT RPAR  &hrm_right RGUI GREATER_THAN
&kp MINUS          &trans               &trans                &trans               &trans     &trans    &trans                &trans                 &trans                &kp EQUAL
                                        &trans                &trans               &trans     &trans    &trans                &trans                 &trans
            >;
        };

        nav {
            bindings = <
&kp HOME             &kp PG_UP            &kp PG_DN           &kp END               &trans         &kp F12  &kp F7              &kp F8               &kp F9              &none
&hrm_left LGUI LEFT  &hrm_left LALT DOWN  &hrm_left LCTRL UP  &hrm_left LGUI RIGHT  &kp BACKSPACE  &kp F11  &hrm_right RGUI F4  &hrm_right RCTRL F5  &hrm_right RALT F6  &hrm_right RGUI F6
&kp LG(Z)            &kp LG(C)            &kp LG(X)           &kp LG(V)             &kp LS(LG(Z))  &kp F10  &kp F1              &kp F2               &kp F3              &none
                                          &trans              &trans                &trans         &trans   &trans              &trans               &trans
            >;
        };

        media {
            bindings = <
&bootloader    &tog 1         &none          &none          &bt BT_CLR     &none  &none         &none            &none             &none
&bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2   &bt BT_SEL 3   &bt BT_SEL 4   &none  &kp C_VOL_DN  &kp C_VOLUME_UP  &kp C_PLAY_PAUSE  &kp C_NEXT
&bt BT_DISC 0  &bt BT_DISC 1  &bt BT_DISC 2  &bt BT_DISC 3  &bt BT_DISC 4  &none  &none         &none            &none             &none
                              &none          &none          &none          &none  &none         &none            &none
            >;
        };

        numpad {
            bindings = <
&kp LS(STAR)               &kp N7                   &kp N9              &kp N8                 &kp LS(PLUS)  &kp LS(PLUS)  &kp N7  &kp N8  &kp N9  &kp LS(STAR)
&hrm_left LEFT_GUI PERIOD  &hrm_left LALT NUMBER_4  &hrm_left LCTRL N5  &hrm_left LEFT_GUI N6  &kp MINUS     &kp MINUS     &kp N4  &kp N5  &kp N6  &kp DOT
&kp N0                     &kp N1                   &kp N2              &kp N3                 &kp FSLH      &kp FSLH      &kp N1  &kp N2  &kp N3  &kp N0
                                                    &trans              &trans                 &trans        &trans        &trans  &trans  &trans
            >;
        };

        template {
            bindings = <
&trans             &trans             &trans              &trans             &trans  &trans  &trans              &trans               &trans              &trans
&hrm_left LGUI N1  &hrm_left LALT N2  &hrm_left LCTRL N3  &hrm_left LGUI N4  &trans  &trans  &hrm_right RGUI N7  &hrm_right RCTRL N8  &hrm_right RALT N9  &hrm_right RGUI N0
&trans             &trans             &trans              &trans             &trans  &trans  &trans              &trans               &trans              &trans
                                      &trans              &trans             &trans  &trans  &trans              &trans               &trans
            >;
        };
    };
};
